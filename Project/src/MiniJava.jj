options
{
  JDK_VERSION = "1.7";
  OUTPUT_DIRECTORY = "lexer";
  static = true;
}

PARSER_BEGIN(MiniJavaParser)
package lexer;

import java.util.*;
import java.io.*;
import ast.*;
import ast.declaration.*;
import ast.expression.*;
import ast.statement.*;
import ast.type.*;

public class MiniJavaParser{
	private static MiniJavaParser parser;

    public static Program parse(InputStream in, String encoding) throws ParseException {
        if (parser == null) {
            parser = new MiniJavaParser(in, encoding);
        } else {
            parser.reset(in, encoding);
        }
        return parser.Program();
    }

    public static Program parse(InputStream in) throws ParseException {
        return parse(in, null);
    }

    public static Program parse(File file, String encoding) throws ParseException {
        try {
	        FileInputStream in = new FileInputStream(file);
	        try {
	        	return parse(in, encoding);
	        } finally {
	        	in.close();
	        }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    
    public static Program parse(File file) throws ParseException {
		return parse(file, null);
    }
    
    private void reset(InputStream in, String encoding) {
        ReInit(in, encoding);
    }
}
PARSER_END(MiniJavaParser)

/* White space */
SKIP :
{
	" "
|	"\n"
|	"\r"
|	"\t"
}

/* Comments */

SKIP :
{
	"//" : SINGLE_LINE_COMMENT
|	"/*" : MULTI_LINE_COMMENT
}

<SINGLE_LINE_COMMENT> SKIP :
{
	"\n" : DEFAULT
|	"\r" : DEFAULT
|	"\r\n" : DEFAULT
}

<MULTI_LINE_COMMENT> SKIP :
{
	"*/" : DEFAULT
}

<SINGLE_LINE_COMMENT,MULTI_LINE_COMMENT> MORE :
{
	< ~[] >
}

/* Keywords */

TOKEN : {
	< CLASS: "class" >
|	< PUBLIC: "public" >
|	< STATIC: "static" >
|	< VOID: "void" >
|	< STRING: "string" >
|	< RETURN: "return" >
|	< INT: "int" >
|	< BOOLEAN: "boolean" >
|	< IF: "if" >
|	< ELSE: "else" >
|	< WHILE: "while" >
|	< PRINT: "System.out.println" >
|	< LENGTH: "length" >
|	< TRUE: "true" >
|	< FALSE: "false" >
|	< THIS: "this" >
|	< NEW: "new" >
|	< LONG: "long" >
|	< EXTENDS: "extends" >
|	< IGNORE0: "String" >
}

/* Literals */

TOKEN : 
{
	< INTEGETR_LITERAL: 
		"0"
	|	["1"-"9"] (["0"-"9"])* >
|	< LONG_LITERAL: 
		"0" ["l","L"]
	|	["1"-"9"] (["0"-"9"])* ["l","L"] >
}

/* Identifiers */

TOKEN : 
{
	< IDENTIFIER: 
		["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])* >	
}

/* Separators */

TOKEN : 
{
	< LPAREN: "(" >
|	< RPAREN: ")" >
|	< LBRACE: "{" >
|	< RBRACE: "}" >
|	< LBRACKET: "[" >
|	< RBRACKET: "]" >
|	< SEMICOLON: ";" >
|	< COMMA: "," >
|	< DOT: "." >
}

/* Operators */

TOKEN :
{
	< ASSIGN: "=" >
|	< LT: "<" >
|	< NOT: "!" >
|	< EQ: "==" >
|	< LE: "<=" >
|	< GE: ">=" >
|	< NE: "!=" >
|	< SC_OR: "||" >
|	< SC_AND: "&&" >
|	< PLUS: "+" >
|	< MINUS: "-" >
|	< MULT: "*" >
}

/* MiniJava Grammar */

/* Program */

Program Program():
{
	MainClass mc;
	List<ClassDeclaration> classdecl = new LinkedList<ClassDeclaration>();
	ClassDeclaration cd;
}
{
	mc = MainClass()
	( cd = ClassDeclaration() { classdecl.add(cd); } )*
	<EOF>
	{ return new Program(mc.getBeginLine(), mc.getBeginColumn(), mc, classdecl); }	  
}

/* MainClass */

MainClass MainClass():
{
	StatementBlock block;
	String id;
	String input;
	int Line;
	int Column;
}
{
	"class" {Line=token.beginLine;Column=token.beginColumn;} <IDENTIFIER> {id=token.image;} "{" "public" "static" "void"
		<IDENTIFIER> {if (!"main".equals(token.image)) throw new ParseException("mainclass method must be named main");}
		"(" "String" "[" "]" <IDENTIFIER> {input=token.image;} ")"
		"{" block=StatementBlock() "}" "}"
		{return new MainClass(Line,Column,block,id,input);}
}

/* ClassDeclaration */

ClassDeclaration ClassDeclaration():
{
	String id;
	String extendsid = null;
	VariableDeclaration vd;
	MethodDeclaration md;
	List<VariableDeclaration> vds = new LinkedList<VariableDeclaration>();
	List<MethodDeclaration> mds = new LinkedList<MethodDeclaration>();
	int Line;
	int Column;
}
{
	"class" {Line=token.beginLine;Column=token.beginColumn;}
	<IDENTIFIER> {id=token.image;}
	 [ "extends" <IDENTIFIER> {extendsid=token.image;} ] "{"
		( vd=VariableDeclaration() {vds.add(vd);})*
		( md=MethodDeclaration() {mds.add(md);} )*
	"}"
	{return new ClassDeclaration(Line,Column,vds,mds,id,extendsid);}
}

/* VariableDeclaration */

VariableDeclaration VariableDeclaration():
{
  	String id;
  	Type type;
}
{
	type=Type() <IDENTIFIER> {id=token.image;} ";"
	{return new VariableDeclaration(type.getBeginLine(),type.getBeginColumn(),type,id);}
}

/* MethodDeclaration */

MethodDeclaration MethodDeclaration():
{
  	List<Parameter > params = new LinkedList();
  	Type type;
  	String id;
  	StatementBlock block;
  	Expression returnexpr;
  	int Line;
	int Column;
}
{
	"public" {Line=token.beginLine;Column=token.beginColumn;}
	type=Type()
	<IDENTIFIER> {id=token.image;} "(" [ params=FormalList() ] ")"
		"{"
		block=StatementBlock()
		"return" returnexpr=Expression() ";"
		"}"
	{return new MethodDeclaration(Line,Column,type,id,params,block,returnexpr);}
}

/* FormalList */

List<Parameter> FormalList():
{
  	String id;
  	Type type;
  	List<Parameter > ret = new LinkedList<Parameter >();
}
{
	type=Type() <IDENTIFIER> {id=token.image;}
	{ret.add(new Parameter(type.getBeginLine(),type.getBeginColumn(),type,id));}
	( "," type=Type() <IDENTIFIER> {id=token.image;}
	{ret.add(new Parameter(type.getBeginLine(),type.getBeginColumn(),type,id));} )*
	{return ret;}
}


/* StatementBlock */

StatementBlock StatementBlock():
{
	List<VariableDeclaration > vds = new LinkedList<VariableDeclaration >();
	List<Statement > stmts = new LinkedList<Statement >();
	Statement stmt;
	VariableDeclaration vd;
}
{
	( LOOKAHEAD(2) vd=VariableDeclaration() {vds.add(vd);} )*
	( stmt=Statement() {stmts.add(stmt);} )*
	{return new StatementBlock(-1,-1,vds,stmts); } // TODO: Fix line and columt info
}

/* Type */

Type Type():
{
  	int Line;
  	int Column;
  	String id;
}
{
	"int"{Line=token.beginLine;Column=token.beginColumn;}
	["[" "]" {return new PrimitiveType(Line,Column,PrimitiveType.Primitive.IntArr);}]
	{return new PrimitiveType(Line,Column,PrimitiveType.Primitive.Int);}
|	"boolean" {Line=token.beginLine;Column=token.beginColumn;}
	{return new PrimitiveType(Line,Column,PrimitiveType.Primitive.Boolean);}
|	"long" {Line=token.beginLine;Column=token.beginColumn;}
	["[" "]"{return new PrimitiveType(Line,Column,PrimitiveType.Primitive.LongArr);}]
	{return new PrimitiveType(Line,Column,PrimitiveType.Primitive.Long);}
|	<IDENTIFIER> {Line=token.beginLine;Column=token.beginColumn;id=token.image;}
	{return new ClassType(Line,Column,id);}
}

/* Statement */

Statement Statement():
{Statement s;}
{
(
  	"{" s=StatementBlock() "}"
|	s=IfStatement()
|	s=WhileStatement()
|	s=PrintStatement()
|	s=AssignmentStatement()
) {return s;}
}

/* IfStatement */

IfStatement IfStatement():
{
  	int Line;
  	int Column;
  	Expression cond;
  	Statement thenstmt;
  	Statement elsestmt=null;
}
{
	"if"{Line=token.beginLine;Column=token.beginColumn;}
	 "(" cond=Expression() ")" thenstmt=Statement() 
		[ LOOKAHEAD(1) "else" elsestmt=Statement() ]
	{return new IfStatement(Line,Column,cond,thenstmt,elsestmt);}
}

/* WhileStatement */

WhileStatement WhileStatement():
{
  	int Line;
  	int Column;
  	Expression cond;
  	Statement loop;
}
{
	"while"{Line=token.beginLine;Column=token.beginColumn;}
	 "(" cond=Expression() ")" loop=Statement()
	{return new WhileStatement(Line,Column,cond,loop);}
}

/* PrintStatement */

PrintStatement PrintStatement():
{
  	int Line;
  	int Column;
  	Expression expr;
}
{
	"System.out.println" {Line=token.beginLine;Column=token.beginColumn;}
	 "(" expr=Expression() ")" ";"
	 {return new PrintStatement(Line,Column,expr);}
}

/* AssignmentStatement */

AssignmentStatement AssignmentStatement():
{
  	int Line;
  	int Column;
  	String id;
  	Expression index = null;
  	Expression expr;
}
{
	<IDENTIFIER> {Line=token.beginLine;Column=token.beginColumn;id=token.image;}
	[ "[" index=Expression() "]" ] "=" expr=Expression() ";"
	 {return new AssignmentStatement(Line,Column,id,index,expr);}
}

/* Expression */
/* http://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html */
Expression Expression():
{Expression e;}
{
	e=OrExpression(){return e;}
}

Expression OrExpression():
{
	Expression ret;
	Expression e;
}
{
	ret=AndExpression() 
		( "||" e=AndExpression()
		{ret=new BinaryExpression(ret.getBeginLine(),ret.getBeginColumn(),
			BinaryExpression.Operator.Or,ret,e);} )*
	{return ret;}
}

Expression AndExpression():
{
	Expression ret;
	Expression e;
}
{
	ret=EqualityExpression()
		( "&&" e=EqualityExpression()
		{ret=new BinaryExpression(ret.getBeginLine(),ret.getBeginColumn(),
			BinaryExpression.Operator.And,ret,e);} )*
	{return ret;}
}

Expression EqualityExpression():
{
	Expression ret;
	Expression e;
	BinaryExpression.Operator op;
}
{
	ret=RelationalExpression() 
	(
		( "==" e=RelationalExpression(){op=BinaryExpression.Operator.Eq;}
		| "!=" e=RelationalExpression(){op=BinaryExpression.Operator.NotEq;})
		{ret=new BinaryExpression(ret.getBeginLine(),ret.getBeginColumn(),op,ret,e);}
	)*
	{return ret;}
}

Expression RelationalExpression():
{
	Expression ret;
	Expression e;
	BinaryExpression.Operator op;
}
{
	ret=AdditiveExpression() 
	(
		( "<" e=AdditiveExpression(){op=BinaryExpression.Operator.Less;}
		| ">" e=AdditiveExpression(){op=BinaryExpression.Operator.Greater;}
		| "<=" e=AdditiveExpression(){op=BinaryExpression.Operator.LessEq;}
		| ">=" e=AdditiveExpression(){op=BinaryExpression.Operator.GreaterEq;})
		{ret=new BinaryExpression(ret.getBeginLine(),ret.getBeginColumn(),op,ret,e);}
	)*
	{return ret;}
}

Expression AdditiveExpression():
{
	Expression ret;
	Expression e;
	BinaryExpression.Operator op;
}
{
	ret=MultiplicativeExpression()
	(
		( "+" e=MultiplicativeExpression(){op=BinaryExpression.Operator.Plus;}
		| "-" e=MultiplicativeExpression(){op=BinaryExpression.Operator.Minus;})
		{ret=new BinaryExpression(ret.getBeginLine(),ret.getBeginColumn(),op,ret,e);}
	)*
	{return ret;}
}

Expression MultiplicativeExpression():
{
	Expression ret;
	Expression e;
}
{
	ret=UnaryExpression()
		( "*" e=UnaryExpression()
		{ret=new BinaryExpression(ret.getBeginLine(),ret.getBeginColumn(),
			BinaryExpression.Operator.Times,ret,e);} )*
	{return ret;}
}

Expression UnaryExpression():
{
  	int Line;
  	int Column;
	Expression e;
}
{
	"!" {Line=token.beginLine;Column=token.beginColumn;}
	e=UnaryExpression(){return new UnaryExpression(Line,Column,UnaryExpression.Operator.Not,e);}
|	e=PostFixExression() {return e;}
}

Expression PostFixExression():
{
	Expression ret;
	Expression e;
	List<Expression > el = new LinkedList();
	String id;
}
{
	ret=PrimaryExpression()
		( "[" e=Expression() "]"
		{ret=new ArrayAccessExpression(ret.getBeginLine(),ret.getBeginColumn(),
			ret,e);}
		| LOOKAHEAD(2) "." <IDENTIFIER> {id=token.image;} "(" [ el=ExpressionList() ] ")"
		  {ret=new MemberCallExpression(ret.getBeginLine(),ret.getBeginColumn(),
			ret,id,el); el = new LinkedList();}
		| "." "length"
		{ret=new LengthExpression(ret.getBeginLine(),ret.getBeginColumn(),
			ret);})*
	{return ret;}
}

Expression PrimaryExpression():
{
  	int Line;
  	int Column;
  	String image;
  	Expression e;
  	int i = 0;
}
{
	<INTEGETR_LITERAL>
	{Line=token.beginLine;Column=token.beginColumn;image=token.image;}
	{return new IntegerLiteralExpression(Line,Column,image);}
|	<LONG_LITERAL>
	{Line=token.beginLine;Column=token.beginColumn;image=token.image;}
	{return new LongLiteralExpression(Line,Column,image);}
|	"true" {Line=token.beginLine;Column=token.beginColumn;}
	{return new BooleanLiteralExpression(Line,Column,true);}
|	"false" {Line=token.beginLine;Column=token.beginColumn;}
	{return new BooleanLiteralExpression(Line,Column,false);}
|	<IDENTIFIER>
	{Line=token.beginLine;Column=token.beginColumn;image=token.image;}
	{return new IdentifierExpression(Line,Column,image);}
|	"this"
	{Line=token.beginLine;Column=token.beginColumn;}
	{return new ThisExpression(Line,Column);}
|	"(" e=Expression() ")" {return e;}
|	LOOKAHEAD(2) "new" {Line=token.beginLine;Column=token.beginColumn;}
		( "int" (LOOKAHEAD(2)"[" e=Expression() "]"{i++;})+
		{return new NewArrayExpression(Line,Column,e,PrimitiveType.Primitive.IntArr,i);}
		| "long" (LOOKAHEAD(2)"[" e=Expression() "]"{i++;})+
		{return new NewArrayExpression(Line,Column,e,PrimitiveType.Primitive.LongArr,i);} )
|	"new" {Line=token.beginLine;Column=token.beginColumn;}
	<IDENTIFIER> {image=token.image;} "(" ")"
	{return new NewClassExpression(Line,Column,image);}
}

List<Expression> ExpressionList():
{
	List<Expression > el = new LinkedList<Expression >();
	Expression e;
	
}
{
	e=Expression() {el.add(e);}
	( "," e=Expression() {el.add(e);} )*
	{return el;}
}